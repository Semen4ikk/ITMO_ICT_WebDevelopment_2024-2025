{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Lr_2/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"models"},{"location":"Lr_2/models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"Lr_2/models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_2/models/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_2/models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_2/models/#modelspy","text":"","title":"models.py:"},{"location":"Lr_2/models/#_5","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_2/models/#_6","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_2/models/#_7","text":"\u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_2/models/#_8","text":"\u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_2/serilazers/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 forms.py: \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430: class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport') \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], ) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430: class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"Lr_2/serilazers/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"Lr_2/serilazers/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_2/serilazers/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_2/serilazers/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_2/serilazers/#formspy","text":"","title":"forms.py:"},{"location":"Lr_2/serilazers/#_5","text":"class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport')","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430:"},{"location":"Lr_2/serilazers/#_6","text":"class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], )","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"Lr_2/serilazers/#_7","text":"class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430:"},{"location":"Lr_2/serilazers/#_8","text":"class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"Lr_2/settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"settings"},{"location":"Lr_2/settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"Lr_2/settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_2/settings/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_2/settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_2/settings/#settingspy","text":"from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"settings.py:"},{"location":"Lr_2/urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"urls"},{"location":"Lr_2/urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lr_2/urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_2/urls/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_2/urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_2/urls/#urlspy","text":"urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"urls.py:"},{"location":"Lr_2/views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438: def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430: def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432: def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432: def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432: def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f: def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438: def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430: @login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"views"},{"location":"Lr_2/views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lr_2/views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_2/views/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_2/views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_2/views/#viewspy","text":"","title":"views.py:"},{"location":"Lr_2/views/#_5","text":"def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html')","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"},{"location":"Lr_2/views/#_6","text":"def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:"},{"location":"Lr_2/views/#_7","text":"def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430:"},{"location":"Lr_2/views/#_8","text":"def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432:"},{"location":"Lr_2/views/#_9","text":"def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432:"},{"location":"Lr_2/views/#_10","text":"def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, })","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432:"},{"location":"Lr_2/views/#_11","text":"def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:"},{"location":"Lr_2/views/#_12","text":"def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438:"},{"location":"Lr_2/views/#_13","text":"@login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430:"},{"location":"Lr_3/Swagger/","text":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a JSON Swagger api \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts \u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435","title":"swagger"},{"location":"Lr_3/Swagger/#_1","text":"","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"Lr_3/Swagger/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/Swagger/#_3","text":"JSON Swagger api","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/Swagger/#_4","text":"\u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"Lr_3/Swagger/#_5","text":"","title":"\u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b"},{"location":"Lr_3/Swagger/#_6","text":"","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435"},{"location":"Lr_3/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\" \u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\" \u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\" \u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\" \u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"models"},{"location":"Lr_3/models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"Lr_3/models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/models/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_3/models/#modelspy","text":"","title":"models.py:"},{"location":"Lr_3/models/#bustype","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_3/models/#bus","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_3/models/#driver","text":"\u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_3/models/#route","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_3/models/#workshift","text":"\u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"Lr_3/serializers/","text":"Serializer \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 serializer.py: Serializers: from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"serializers"},{"location":"Lr_3/serializers/#serializer","text":"","title":"Serializer"},{"location":"Lr_3/serializers/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/serializers/#_2","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/serializers/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_3/serializers/#serializerpy","text":"","title":"serializer.py:"},{"location":"Lr_3/serializers/#serializers","text":"from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"Serializers:"},{"location":"Lr_3/settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"settings"},{"location":"Lr_3/settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"Lr_3/settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/settings/#_3","text":"Python","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_3/settings/#settingspy","text":"DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"settings.py:"},{"location":"Lr_3/urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"urls"},{"location":"Lr_3/urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lr_3/urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/urls/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_3/urls/#urlspy","text":"from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"urls.py:"},{"location":"Lr_3/views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"views"},{"location":"Lr_3/views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lr_3/views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Lr_3/views/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"Lr_3/views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Lr_3/views/#viewspy","text":"","title":"views.py:"},{"location":"Lr_3/views/#_5","text":"from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"}]}