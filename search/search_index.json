{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041f\u0440\u043e\u043a\u043e\u043f\u0435\u0446 \u0421\u0435\u043c\u0435\u043d","title":"Home"},{"location":"Leetcode/leetcode/","text":"\u041b\u0438\u0442\u043a\u043e\u0434\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043b\u0438\u0442\u043a\u043e\u0434\u043e\u0432. \u0421\u0442\u0435\u043a python \u041b\u0438\u0441\u0442\u0438\u043d\u0433 88. Merge Sorted Array: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def merge(self, nums1, m, nums2, n): i = m - 1 j = n - 1 k = m + n - 1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1 27. Remove Element: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def removeElement(self, nums, val): i = 0 for j in range(len(nums)): if nums[j] != val: nums[i] = nums[j] i += 1 return i 26. Remove Duplicates from Sorted Array: class Solution(object): def removeDuplicates(self, nums): if len(nums) == 0: return 0 i = 0 for j in range(1, len(nums)): if nums[j] != nums[i]: i += 1 nums[i] = nums[j] return i + 1 169. Majority Element: class Solution(object): def majorityElement(self, nums): count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate 121. Best Time to Buy and Sell Stock: class Solution(object): def maxProfit(self, prices): if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit 13. Roman to Integer: class Solution(object): def romanToInt(self, s): roman_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } result = 0 for i in range(len(s)): if i > 0 and roman_map[s[i]] > roman_map[s[i - 1]]: result += roman_map[s[i]] - 2 * roman_map[s[i - 1]] else: result += roman_map[s[i]] return result 58. Length of Last Word: class Solution(object): def lengthOfLastWord(self, s): words = s.split() if words: return len(words[-1]) return 0 14. Longest Common Prefix: class Solution(object): def longestCommonPrefix(self, strs): if not strs: return \"\" shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other in strs: if other[i] != char: return shortest_str[:i] return shortest_str 28. Find the Index of the First Occurrence in a String: \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def strStr(self, haystack, needle): if not needle: return 0 for i in range(len(haystack)): if i + len(needle) > len(haystack): break if haystack[i:i + len(needle)] == needle: return i return -1 80. Remove Duplicates from Sorted Array II: class Solution(object): def removeDuplicates(self, nums): if len(nums) <= 2: return len(nums) k = 2 for i in range(2, len(nums)): if nums[i] != nums[k - 2]: nums[k] = nums[i] k += 1 return k","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"Leetcode/leetcode/#_1","text":"","title":"\u041b\u0438\u0442\u043a\u043e\u0434\u044b"},{"location":"Leetcode/leetcode/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043b\u0438\u0442\u043a\u043e\u0434\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Leetcode/leetcode/#_3","text":"python","title":"\u0421\u0442\u0435\u043a"},{"location":"Leetcode/leetcode/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"Leetcode/leetcode/#88-merge-sorted-array","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def merge(self, nums1, m, nums2, n): i = m - 1 j = n - 1 k = m + n - 1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1","title":"88. Merge Sorted Array:"},{"location":"Leetcode/leetcode/#27-remove-element","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def removeElement(self, nums, val): i = 0 for j in range(len(nums)): if nums[j] != val: nums[i] = nums[j] i += 1 return i","title":"27. Remove Element:"},{"location":"Leetcode/leetcode/#26-remove-duplicates-from-sorted-array","text":"class Solution(object): def removeDuplicates(self, nums): if len(nums) == 0: return 0 i = 0 for j in range(1, len(nums)): if nums[j] != nums[i]: i += 1 nums[i] = nums[j] return i + 1","title":"26. Remove Duplicates from Sorted Array:"},{"location":"Leetcode/leetcode/#169-majority-element","text":"class Solution(object): def majorityElement(self, nums): count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate","title":"169. Majority Element:"},{"location":"Leetcode/leetcode/#121-best-time-to-buy-and-sell-stock","text":"class Solution(object): def maxProfit(self, prices): if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit","title":"121. Best Time to Buy and Sell Stock:"},{"location":"Leetcode/leetcode/#13-roman-to-integer","text":"class Solution(object): def romanToInt(self, s): roman_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } result = 0 for i in range(len(s)): if i > 0 and roman_map[s[i]] > roman_map[s[i - 1]]: result += roman_map[s[i]] - 2 * roman_map[s[i - 1]] else: result += roman_map[s[i]] return result","title":"13. Roman to Integer:"},{"location":"Leetcode/leetcode/#58-length-of-last-word","text":"class Solution(object): def lengthOfLastWord(self, s): words = s.split() if words: return len(words[-1]) return 0","title":"58. Length of Last Word:"},{"location":"Leetcode/leetcode/#14-longest-common-prefix","text":"class Solution(object): def longestCommonPrefix(self, strs): if not strs: return \"\" shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other in strs: if other[i] != char: return shortest_str[:i] return shortest_str","title":"14. Longest Common Prefix:"},{"location":"Leetcode/leetcode/#28-find-the-index-of-the-first-occurrence-in-a-string","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c class Solution(object): def strStr(self, haystack, needle): if not needle: return 0 for i in range(len(haystack)): if i + len(needle) > len(haystack): break if haystack[i:i + len(needle)] == needle: return i return -1","title":"28. Find the Index of the First Occurrence in a String:"},{"location":"Leetcode/leetcode/#80-remove-duplicates-from-sorted-array-ii","text":"class Solution(object): def removeDuplicates(self, nums): if len(nums) <= 2: return len(nums) k = 2 for i in range(2, len(nums)): if nums[i] != nums[k - 2]: nums[k] = nums[i] k += 1 return k","title":"80. Remove Duplicates from Sorted Array II:"},{"location":"Pr3/pr3/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c 6 \u043d\u043e\u0432\u044b\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438 5 \u043d\u043e\u0432\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0432\u043d\u043e\u0432\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043e\u0442 1 \u0434\u043e 3 \u043c\u0430\u0448\u0438\u043d. from project_first_app.models import CustomUser, Car, Ownership from datetime import date owner1 = CustomUser.objects.create_user(username=\"ivan_petrov\", password=\"password123\", passport_number=\"123987456\") owner2 = CustomUser.objects.create_user(username=\"olga_ivanova\", password=\"password123\", passport_number=\"456123789\") owner3 = CustomUser.objects.create_user(username=\"pavel_sidorov\", password=\"password123\", passport_number=\"789456123\") owner4 = CustomUser.objects.create_user(username=\"anna_kuznetsova\", password=\"password123\", passport_number=\"321654987\") owner5 = CustomUser.objects.create_user(username=\"sergey_volkov\", password=\"password123\", passport_number=\"654789321\") owner6 = CustomUser.objects.create_user(username=\"elena_rogozina\", password=\"password123\", passport_number=\"987321654\") car1 = Car.objects.create(make=\"Honda\", model=\"Civic\", color=\"Black\", state_number=\"AAA123\") car2 = Car.objects.create(make=\"Hyundai\", model=\"Elantra\", color=\"Blue\", state_number=\"BBB234\") car3 = Car.objects.create(make=\"Tesla\", model=\"Model 3\", color=\"White\", state_number=\"CCC345\") car4 = Car.objects.create(make=\"Honda\", model=\"Accord\", color=\"Red\", state_number=\"DDD456\") car5 = Car.objects.create(make=\"Hyundai\", model=\"Santa Fe\", color=\"Green\", state_number=\"EEE567\") Ownership.objects.create(owner=owner1, car=car1, start_date=date(2024, 1, 1)) Ownership.objects.create(owner=owner1, car=car2, start_date=date(2024, 1, 15)) Ownership.objects.create(owner=owner2, car=car3, start_date=date(2024, 2, 1)) Ownership.objects.create(owner=owner3, car=car4, start_date=date(2024, 3, 1)) Ownership.objects.create(owner=owner4, car=car5, start_date=date(2024, 4, 1)) Ownership.objects.create(owner=owner5, car=car2, start_date=date(2024, 5, 1)) Ownership.objects.create(owner=owner6, car=car3, start_date=date(2024, 6, 1)) Ownership.objects.create(owner=owner6, car=car4, start_date=date(2024, 7, 1)) \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: ivan_petrov, olga_ivanova, pavel_sidorov, anna_kuznetsova, sergey_volkov, elena_rogozina \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: Honda Civic, Hyundai Elantra, Tesla Model 3, Honda Accord, Hyundai Santa Fe \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c. \u0412\u0441\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u043c\u0430\u0440\u043a\u0438 Honda: honda_cars = Car.objects.filter(make=\"Honda\") for car in honda_cars: print(car) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda Civic (AAA123) Honda Accord (DDD456) \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \"elena\": elena_owners = CustomUser.objects.filter(username__icontains=\"elena\") for owner in elena_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 elena_rogozina \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0439 \u0435\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446: import random random_car = random.choice(Car.objects.all()) owner = random_car.ownership_set.first().owner print(f\"Car: {random_car}, Owner: {owner.username}\") \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Car: Tesla Model 3, Owner: olga_ivanova \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430: red_cars = Car.objects.filter(color=\"Red\") red_car_owners = CustomUser.objects.filter(ownerships__car__in=red_cars).distinct() for owner in red_car_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 pavel_sidorov elena_rogozina \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0441 2024 \u0433\u043e\u0434\u0430: owners_from_2024 = CustomUser.objects.filter(ownerships__start_date__year=2024).distinct() for owner in owners_from_2024: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov olga_ivanova pavel_sidorov anna_kuznetsova sergey_volkov elena_rogozina \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c: earliest_ownership_date = Ownership.objects.earliest('start_date').start_date print(f\"The earliest ownership start date is: {earliest_ownership_date}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 The earliest ownership start date is: 2024-01-01 \u0427\u0438\u0441\u043b\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: owners_with_car_count = CustomUser.objects.annotate(car_count=Count('ownerships__car')) for owner in owners_with_car_count: print(f\"{owner.username} owns {owner.car_count} cars\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov owns 2 cars olga_ivanova owns 1 cars pavel_sidorov owns 1 cars anna_kuznetsova owns 1 cars sergey_volkov owns 1 cars elena_rogozina owns 2 cars \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: car_make_counts = Car.objects.values('make').annotate(count=Count('make')) for make_count in car_make_counts: print(f\"{make_count['make']}: {make_count['count']} cars\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda: 2 cars Hyundai: 2 cars Tesla: 1 cars \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f sorted_owners_by_license_date = CustomUser.objects.order_by('ownerships__start_date').distinct() # \u0412\u044b\u0432\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 for owner in sorted_owners_by_license_date: print(f\"{owner.username} - License Issue Date: {owner.ownerships.first().start_date}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov - License Issue Date: 2024-01-01 olga_ivanova - License Issue Date: 2024-02-01 pavel_sidorov - License Issue Date: 2024-03-01 anna_kuznetsova - License Issue Date: 2024-04-01 sergey_volkov - License Issue Date: 2024-05-01 elena_rogozina - License Issue Date: 2024-06-01","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"Pr3/pr3/#31","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e 3.1"},{"location":"Pr3/pr3/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"Pr3/pr3/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c 6 \u043d\u043e\u0432\u044b\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438 5 \u043d\u043e\u0432\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0432\u043d\u043e\u0432\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043e\u0442 1 \u0434\u043e 3 \u043c\u0430\u0448\u0438\u043d. from project_first_app.models import CustomUser, Car, Ownership from datetime import date owner1 = CustomUser.objects.create_user(username=\"ivan_petrov\", password=\"password123\", passport_number=\"123987456\") owner2 = CustomUser.objects.create_user(username=\"olga_ivanova\", password=\"password123\", passport_number=\"456123789\") owner3 = CustomUser.objects.create_user(username=\"pavel_sidorov\", password=\"password123\", passport_number=\"789456123\") owner4 = CustomUser.objects.create_user(username=\"anna_kuznetsova\", password=\"password123\", passport_number=\"321654987\") owner5 = CustomUser.objects.create_user(username=\"sergey_volkov\", password=\"password123\", passport_number=\"654789321\") owner6 = CustomUser.objects.create_user(username=\"elena_rogozina\", password=\"password123\", passport_number=\"987321654\") car1 = Car.objects.create(make=\"Honda\", model=\"Civic\", color=\"Black\", state_number=\"AAA123\") car2 = Car.objects.create(make=\"Hyundai\", model=\"Elantra\", color=\"Blue\", state_number=\"BBB234\") car3 = Car.objects.create(make=\"Tesla\", model=\"Model 3\", color=\"White\", state_number=\"CCC345\") car4 = Car.objects.create(make=\"Honda\", model=\"Accord\", color=\"Red\", state_number=\"DDD456\") car5 = Car.objects.create(make=\"Hyundai\", model=\"Santa Fe\", color=\"Green\", state_number=\"EEE567\") Ownership.objects.create(owner=owner1, car=car1, start_date=date(2024, 1, 1)) Ownership.objects.create(owner=owner1, car=car2, start_date=date(2024, 1, 15)) Ownership.objects.create(owner=owner2, car=car3, start_date=date(2024, 2, 1)) Ownership.objects.create(owner=owner3, car=car4, start_date=date(2024, 3, 1)) Ownership.objects.create(owner=owner4, car=car5, start_date=date(2024, 4, 1)) Ownership.objects.create(owner=owner5, car=car2, start_date=date(2024, 5, 1)) Ownership.objects.create(owner=owner6, car=car3, start_date=date(2024, 6, 1)) Ownership.objects.create(owner=owner6, car=car4, start_date=date(2024, 7, 1))","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Pr3/pr3/#_2","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: ivan_petrov, olga_ivanova, pavel_sidorov, anna_kuznetsova, sergey_volkov, elena_rogozina \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: Honda Civic, Hyundai Elantra, Tesla Model 3, Honda Accord, Hyundai Santa Fe","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"Pr3/pr3/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Pr3/pr3/#_3","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Pr3/pr3/#_4","text":"\u0412\u0441\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u043c\u0430\u0440\u043a\u0438 Honda: honda_cars = Car.objects.filter(make=\"Honda\") for car in honda_cars: print(car) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda Civic (AAA123) Honda Accord (DDD456) \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 \"elena\": elena_owners = CustomUser.objects.filter(username__icontains=\"elena\") for owner in elena_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 elena_rogozina \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0439 \u0435\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446: import random random_car = random.choice(Car.objects.all()) owner = random_car.ownership_set.first().owner print(f\"Car: {random_car}, Owner: {owner.username}\") \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Car: Tesla Model 3, Owner: olga_ivanova","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c."},{"location":"Pr3/pr3/#_5","text":"red_cars = Car.objects.filter(color=\"Red\") red_car_owners = CustomUser.objects.filter(ownerships__car__in=red_cars).distinct() for owner in red_car_owners: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 pavel_sidorov elena_rogozina","title":"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043c\u0430\u0448\u0438\u043d \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430:"},{"location":"Pr3/pr3/#2024","text":"owners_from_2024 = CustomUser.objects.filter(ownerships__start_date__year=2024).distinct() for owner in owners_from_2024: print(owner) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov olga_ivanova pavel_sidorov anna_kuznetsova sergey_volkov elena_rogozina","title":"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b, \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0441 2024 \u0433\u043e\u0434\u0430:"},{"location":"Pr3/pr3/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"Pr3/pr3/#_6","text":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c: earliest_ownership_date = Ownership.objects.earliest('start_date').start_date print(f\"The earliest ownership start date is: {earliest_ownership_date}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 The earliest ownership start date is: 2024-01-01 \u0427\u0438\u0441\u043b\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: owners_with_car_count = CustomUser.objects.annotate(car_count=Count('ownerships__car')) for owner in owners_with_car_count: print(f\"{owner.username} owns {owner.car_count} cars\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov owns 2 cars olga_ivanova owns 1 cars pavel_sidorov owns 1 cars anna_kuznetsova owns 1 cars sergey_volkov owns 1 cars elena_rogozina owns 2 cars \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: car_make_counts = Car.objects.values('make').annotate(count=Count('make')) for make_count in car_make_counts: print(f\"{make_count['make']}: {make_count['count']} cars\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 Honda: 2 cars Hyundai: 2 cars Tesla: 1 cars \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f sorted_owners_by_license_date = CustomUser.objects.order_by('ownerships__start_date').distinct() # \u0412\u044b\u0432\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 for owner in sorted_owners_by_license_date: print(f\"{owner.username} - License Issue Date: {owner.ownerships.first().start_date}\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 ivan_petrov - License Issue Date: 2024-01-01 olga_ivanova - License Issue Date: 2024-02-01 pavel_sidorov - License Issue Date: 2024-03-01 anna_kuznetsova - License Issue Date: 2024-04-01 sergey_volkov - License Issue Date: 2024-05-01 elena_rogozina - License Issue Date: 2024-06-01","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 Server: import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c UDP-\u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 server_address = ('localhost', 7777) server_socket.bind(server_address) while True: print('\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f...') data, address = server_socket.recvfrom(4096) print(data.decode()) if data: sent = server_socket.sendto(b'Hello, client', address) Client: import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c UDP-\u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 server_address = ('localhost', 7777) message = 'Hello, server'.encode() try: # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 sent = client_socket.sendto(message, server_address) data, server = client_socket.recvfrom(4096) print(data.decode()) finally: print('\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430') client_socket.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"lab1/task1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task1/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP","title":"\u0421\u0442\u0435\u043a"},{"location":"lab1/task1/#_3","text":"Server: import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c UDP-\u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 server_address = ('localhost', 7777) server_socket.bind(server_address) while True: print('\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f...') data, address = server_socket.recvfrom(4096) print(data.decode()) if data: sent = server_socket.sendto(b'Hello, client', address) Client: import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c UDP-\u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 server_address = ('localhost', 7777) message = 'Hello, server'.encode() try: # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 sent = client_socket.sendto(message, server_address) data, server = client_socket.recvfrom(4096) print(data.decode()) finally: print('\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430') client_socket.close()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 Server: import socket import math def start_server(host='localhost', port=777): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen() print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d, \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\") try: conn, addr = server_socket.accept() with conn: print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a {addr}\") data = conn.recv(1024).decode() if data: a, b = map(float, data.split()) hypotenuse = math.sqrt(a ** 2 + b ** 2) conn.sendall(str(hypotenuse).encode()) finally: server_socket.close() # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 start_server() Client: import socket def start_client(host='localhost', port=777): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) try: a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \") b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \") client_socket.sendall(f\"{a} {b}\".encode()) data = client_socket.recv(1024) print(f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: {data.decode()}\") finally: client_socket.close() # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 start_client()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"lab1/task2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task2/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a"},{"location":"lab1/task2/#_3","text":"Server: import socket import math def start_server(host='localhost', port=777): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen() print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d, \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\") try: conn, addr = server_socket.accept() with conn: print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a {addr}\") data = conn.recv(1024).decode() if data: a, b = map(float, data.split()) hypotenuse = math.sqrt(a ** 2 + b ** 2) conn.sendall(str(hypotenuse).encode()) finally: server_socket.close() # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 start_server() Client: import socket def start_client(host='localhost', port=777): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) try: a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \") b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \") client_socket.sendall(f\"{a} {b}\".encode()) data = client_socket.recv(1024) print(f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: {data.decode()}\") finally: client_socket.close() # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 start_client()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041b\u0438\u0441\u0442\u0438\u043d\u0433 Server: import socket def create_server(host='127.0.0.1', port=8081): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((host, port)) server_socket.listen(1) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{host}:{port}\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442: {client_address}\") request = client_socket.recv(1024).decode() print(f\"\u0417\u0430\u043f\u0440\u043e\u0441: {request}\") try: with open('index.html', 'r') as file: html_content = file.read() except FileNotFoundError: html_content = \"<h1>404 Not Found</h1>\" response = f\"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n{html_content}\" client_socket.sendall(response.encode()) client_socket.close() if __name__ == \"__main__\": create_server()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3"},{"location":"lab1/task3/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task3/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket","title":"\u0421\u0442\u0435\u043a"},{"location":"lab1/task3/#_3","text":"Server: import socket def create_server(host='127.0.0.1', port=8081): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((host, port)) server_socket.listen(1) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{host}:{port}\") while True: client_socket, client_address = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442: {client_address}\") request = client_socket.recv(1024).decode() print(f\"\u0417\u0430\u043f\u0440\u043e\u0441: {request}\") try: with open('index.html', 'r') as file: html_content = file.read() except FileNotFoundError: html_content = \"<h1>404 Not Found</h1>\" response = f\"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n{html_content}\" client_socket.sendall(response.encode()) client_socket.close() if __name__ == \"__main__\": create_server()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u0427\u0430\u0442: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 Server: import socket import threading # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 SERVER_HOST = \"0.0.0.0\" SERVER_PORT = 5002 client_sockets = {} usernames = {} def handle_client(client_socket): # \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f client_socket.send(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \".encode()) username = client_socket.recv(1024).decode() # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f usernames[client_socket] = username client_sockets[client_socket] = username # \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u0432\u0441\u0435\u0445 \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 broadcast(f\"{username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\", client_socket) while True: try: message = client_socket.recv(1024).decode() if message: full_message = f\"{username}: {message}\" print(f\"Received: {full_message}\") broadcast(full_message, client_socket) else: break except: break # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 broadcast(f\"{username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", client_socket) del usernames[client_socket] del client_sockets[client_socket] client_socket.close() def broadcast(message, client_socket): for socket in client_sockets: if socket != client_socket: socket.send(message.encode()) def start_server(): server_socket = socket.socket() server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((SERVER_HOST, SERVER_PORT)) server_socket.listen(5) print(f\"Server started on {SERVER_HOST}:{SERVER_PORT}\") while True: client_socket, client_address = server_socket.accept() print(f\"{client_address} connected.\") # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 threading.Thread(target=handle_client, args=(client_socket,)).start() if __name__ == \"__main__\": start_server() Client: import socket import threading SERVER_HOST = \"127.0.0.1\" SERVER_PORT = 5002 def listen_for_messages(client_socket): while True: try: message = client_socket.recv(1024).decode() if message: print(message) else: break except: break def start_client(): client_socket = socket.socket() client_socket.connect((SERVER_HOST, SERVER_PORT)) threading.Thread(target=listen_for_messages, args=(client_socket,), daemon=True).start() while True: message = input() if message.lower() == 'exit': break client_socket.send(message.encode()) client_socket.close() if __name__ == \"__main__\": start_client()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 4"},{"location":"lab1/task4/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task4/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u0427\u0430\u0442: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a"},{"location":"lab1/task4/#_3","text":"Server: import socket import threading # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 SERVER_HOST = \"0.0.0.0\" SERVER_PORT = 5002 client_sockets = {} usernames = {} def handle_client(client_socket): # \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f client_socket.send(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \".encode()) username = client_socket.recv(1024).decode() # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f usernames[client_socket] = username client_sockets[client_socket] = username # \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u0432\u0441\u0435\u0445 \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 broadcast(f\"{username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\", client_socket) while True: try: message = client_socket.recv(1024).decode() if message: full_message = f\"{username}: {message}\" print(f\"Received: {full_message}\") broadcast(full_message, client_socket) else: break except: break # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 broadcast(f\"{username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", client_socket) del usernames[client_socket] del client_sockets[client_socket] client_socket.close() def broadcast(message, client_socket): for socket in client_sockets: if socket != client_socket: socket.send(message.encode()) def start_server(): server_socket = socket.socket() server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((SERVER_HOST, SERVER_PORT)) server_socket.listen(5) print(f\"Server started on {SERVER_HOST}:{SERVER_PORT}\") while True: client_socket, client_address = server_socket.accept() print(f\"{client_address} connected.\") # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 threading.Thread(target=handle_client, args=(client_socket,)).start() if __name__ == \"__main__\": start_server() Client: import socket import threading SERVER_HOST = \"127.0.0.1\" SERVER_PORT = 5002 def listen_for_messages(client_socket): while True: try: message = client_socket.recv(1024).decode() if message: print(message) else: break except: break def start_client(): client_socket = socket.socket() client_socket.connect((SERVER_HOST, SERVER_PORT)) threading.Thread(target=listen_for_messages, args=(client_socket,), daemon=True).start() while True: message = input() if message.lower() == 'exit': break client_socket.send(message.encode()) client_socket.close() if __name__ == \"__main__\": start_client()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: 1. \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. 2. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket import urllib.parse grades = [] def handle_request(request): global grades lines = request.splitlines() method = lines[0].split()[0] if method == \"POST\": # POST-\u0437\u0430\u043f\u0440\u043e\u0441 content_length = int([line for line in lines if line.startswith('Content-Length:')][0].split(': ')[1]) if len(request.split('\\r\\n\\r\\n')) > 1: body = request.split('\\r\\n\\r\\n')[1][:content_length] parsed_body = urllib.parse.parse_qs(body) discipline = parsed_body.get('discipline', [''])[0] grade = parsed_body.get('grade', [''])[0] grades.append((discipline, grade)) response_body = \"<h1>\u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430!</h1><br>\" else: response_body = \"<h1>\u041e\u0448\u0438\u0431\u043a\u0430: \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442!</h1><br>\" elif method == \"GET\": # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0444\u043e\u0440\u043c\u043e\u0439 \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0446\u0435\u043d\u043e\u043a response_body = \"\"\" <html> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"Content-Language\" content=\"ru\"> <title>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a</title> </head> <body> <h1>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h1> <form method=\"POST\" action=\"/\"> \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"discipline\"><br> \u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> <h1>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a</h1> <ul> \"\"\" for discipline, grade in grades: response_body += f\"<li>{discipline}: {grade}</li>\" response_body += \"\"\" </ul> </body> </html> \"\"\" else: response_body = \"\u041c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.\" response = f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n{response_body}\" return response def run_server(host='127.0.0.1', port=8080): \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440.\"\"\" server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{host}:{port}/\") while True: client_socket, addr = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}\") request = client_socket.recv(1024).decode('utf-8') print(f\"\u0417\u0430\u043f\u0440\u043e\u0441: {request}\") # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 if not request.strip(): print(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043f\u0443\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441.\") client_socket.close() continue response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == \"__main__\": run_server()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 5"},{"location":"lab1/task5/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab1/task5/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: 1. \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. 2. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task5/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket","title":"\u0421\u0442\u0435\u043a"},{"location":"lab1/task5/#_4","text":"import socket import urllib.parse grades = [] def handle_request(request): global grades lines = request.splitlines() method = lines[0].split()[0] if method == \"POST\": # POST-\u0437\u0430\u043f\u0440\u043e\u0441 content_length = int([line for line in lines if line.startswith('Content-Length:')][0].split(': ')[1]) if len(request.split('\\r\\n\\r\\n')) > 1: body = request.split('\\r\\n\\r\\n')[1][:content_length] parsed_body = urllib.parse.parse_qs(body) discipline = parsed_body.get('discipline', [''])[0] grade = parsed_body.get('grade', [''])[0] grades.append((discipline, grade)) response_body = \"<h1>\u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430!</h1><br>\" else: response_body = \"<h1>\u041e\u0448\u0438\u0431\u043a\u0430: \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442!</h1><br>\" elif method == \"GET\": # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0444\u043e\u0440\u043c\u043e\u0439 \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0446\u0435\u043d\u043e\u043a response_body = \"\"\" <html> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"Content-Language\" content=\"ru\"> <title>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a</title> </head> <body> <h1>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h1> <form method=\"POST\" action=\"/\"> \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"discipline\"><br> \u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> <h1>\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a</h1> <ul> \"\"\" for discipline, grade in grades: response_body += f\"<li>{discipline}: {grade}</li>\" response_body += \"\"\" </ul> </body> </html> \"\"\" else: response_body = \"\u041c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f.\" response = f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n{response_body}\" return response def run_server(host='127.0.0.1', port=8080): \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440.\"\"\" server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{host}:{port}/\") while True: client_socket, addr = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}\") request = client_socket.recv(1024).decode('utf-8') print(f\"\u0417\u0430\u043f\u0440\u043e\u0441: {request}\") # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 if not request.strip(): print(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043f\u0443\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441.\") client_socket.close() continue response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == \"__main__\": run_server()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/forms/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 forms.py: \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430: class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport') \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], ) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430: class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"Forms"},{"location":"lab2/forms/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab2/forms/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/forms/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"lab2/forms/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/forms/#formspy","text":"","title":"forms.py:"},{"location":"lab2/forms/#_5","text":"class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport')","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430:"},{"location":"lab2/forms/#_6","text":"class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], )","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"lab2/forms/#_7","text":"class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430:"},{"location":"lab2/forms/#_8","text":"class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab2/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab2/models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab2/models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/models/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"lab2/models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/models/#modelspy","text":"","title":"models.py:"},{"location":"lab2/models/#_5","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab2/models/#_6","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab2/models/#_7","text":"\u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab2/models/#_8","text":"\u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab2/settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"},{"location":"lab2/settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab2/settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/settings/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"lab2/settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/settings/#settingspy","text":"from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"settings.py:"},{"location":"lab2/urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"URL-\u0430\u0434\u0440\u0435\u0441\u0430"},{"location":"lab2/urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"lab2/urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/urls/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"lab2/urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/urls/#urlspy","text":"urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"urls.py:"},{"location":"lab2/views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438: def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430: def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432: def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432: def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432: def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f: def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438: def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430: @login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab2/views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"lab2/views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab2/views/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"lab2/views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab2/views/#viewspy","text":"","title":"views.py:"},{"location":"lab2/views/#_5","text":"def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html')","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"},{"location":"lab2/views/#_6","text":"def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:"},{"location":"lab2/views/#_7","text":"def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430:"},{"location":"lab2/views/#_8","text":"def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432:"},{"location":"lab2/views/#_9","text":"def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432:"},{"location":"lab2/views/#_10","text":"def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, })","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432:"},{"location":"lab2/views/#_11","text":"def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:"},{"location":"lab2/views/#_12","text":"def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438:"},{"location":"lab2/views/#_13","text":"@login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430:"},{"location":"lab3/Swagger/","text":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a JSON Swagger api \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts \u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435","title":"Swagger"},{"location":"lab3/Swagger/#_1","text":"","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"lab3/Swagger/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/Swagger/#_3","text":"JSON Swagger api","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/Swagger/#_4","text":"\u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"lab3/Swagger/#_5","text":"","title":"\u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b"},{"location":"lab3/Swagger/#_6","text":"","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435"},{"location":"lab3/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\" \u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\" \u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\" \u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\" \u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab3/models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab3/models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/models/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab3/models/#modelspy","text":"","title":"models.py:"},{"location":"lab3/models/#bustype","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab3/models/#bus","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab3/models/#driver","text":"\u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab3/models/#route","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab3/models/#workshift","text":"\u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"lab3/serializers/","text":"Serializer \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 serializer.py: Serializers: from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b"},{"location":"lab3/serializers/#serializer","text":"","title":"Serializer"},{"location":"lab3/serializers/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/serializers/#_2","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/serializers/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab3/serializers/#serializerpy","text":"","title":"serializer.py:"},{"location":"lab3/serializers/#serializers","text":"from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"Serializers:"},{"location":"lab3/settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"},{"location":"lab3/settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"lab3/settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/settings/#_3","text":"Python","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab3/settings/#settingspy","text":"DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"settings.py:"},{"location":"lab3/urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"URL-\u0430\u0434\u0440\u0435\u0441\u0430"},{"location":"lab3/urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"lab3/urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/urls/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab3/urls/#urlspy","text":"from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"urls.py:"},{"location":"lab3/views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab3/views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"lab3/views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/views/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"lab3/views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab3/views/#viewspy","text":"","title":"views.py:"},{"location":"lab3/views/#_5","text":"from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"},{"location":"lab4/app/","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430. \u0421\u0442\u0435\u043a JavaScript node.js React axios \u041b\u0438\u0441\u0442\u0438\u043d\u0433 app.js: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0440\u043e\u043d\u0442\u0430 import React from 'react'; import { BrowserRouter as Router } from 'react-router-dom'; import { TokenProvider } from './stores/token'; import AppRoutes from './utils/router'; const App = () => { return ( <TokenProvider> <Router> <AppRoutes /> </Router> </TokenProvider> ); }; export default App;","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"lab4/app/#_1","text":"","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"lab4/app/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab4/app/#_3","text":"JavaScript node.js React axios","title":"\u0421\u0442\u0435\u043a"},{"location":"lab4/app/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab4/app/#appjs","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0440\u043e\u043d\u0442\u0430 import React from 'react'; import { BrowserRouter as Router } from 'react-router-dom'; import { TokenProvider } from './stores/token'; import AppRoutes from './utils/router'; const App = () => { return ( <TokenProvider> <Router> <AppRoutes /> </Router> </TokenProvider> ); }; export default App;","title":"app.js:"},{"location":"lab4/components/","text":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430. \u0421\u0442\u0435\u043a JavaScript node.js React axios \u041b\u0438\u0441\u0442\u0438\u043d\u0433 header.jsx: \u0428\u0430\u043f\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 import React from 'react'; import { Link } from 'react-router-dom'; import logo from '../images/logo.png'; import '../Css/Header.css'; // \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0438\u043b\u0438 const Header = () => { return ( <header className=\"d-flex justify-content-between align-items-center p-3\"> <div className=\"logo\"> <img src={logo} alt=\"\u041b\u043e\u0433\u043e\u0442\u0438\u043f\" /> </div> <nav> <ul className=\"d-flex list-unstyled mb-0\"> <li className=\"mx-3\"> <Link to=\"/bus\" className=\"btn btn-link\">Bus</Link> </li> <li className=\"mx-3\"> <Link to=\"/bustype\" className=\"btn btn-link\">BusType</Link> </li> <li className=\"mx-3\"> <Link to=\"/driver\" className=\"btn btn-link\">Driver</Link> </li> <li className=\"mx-3\"> <Link to=\"/route\" className=\"btn btn-link\">Route</Link> </li> <li className=\"mx-3\"> <Link to=\"/work-shifts\" className=\"btn btn-link\">Work Shifts</Link> </li> </ul> </nav> </header> ); }; export default Header; ProtectedRoute.js: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0443\u0442\u0438 import React from 'react'; import { Navigate } from 'react-router-dom'; import { useToken } from '../stores/token'; const ProtectedRoute = ({ element }) => { const { token } = useToken(); return token ? element : <Navigate to=\"/login\" />; }; export default ProtectedRoute;","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"lab4/components/#_1","text":"","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"lab4/components/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab4/components/#_3","text":"JavaScript node.js React axios","title":"\u0421\u0442\u0435\u043a"},{"location":"lab4/components/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab4/components/#headerjsx","text":"\u0428\u0430\u043f\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 import React from 'react'; import { Link } from 'react-router-dom'; import logo from '../images/logo.png'; import '../Css/Header.css'; // \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0438\u043b\u0438 const Header = () => { return ( <header className=\"d-flex justify-content-between align-items-center p-3\"> <div className=\"logo\"> <img src={logo} alt=\"\u041b\u043e\u0433\u043e\u0442\u0438\u043f\" /> </div> <nav> <ul className=\"d-flex list-unstyled mb-0\"> <li className=\"mx-3\"> <Link to=\"/bus\" className=\"btn btn-link\">Bus</Link> </li> <li className=\"mx-3\"> <Link to=\"/bustype\" className=\"btn btn-link\">BusType</Link> </li> <li className=\"mx-3\"> <Link to=\"/driver\" className=\"btn btn-link\">Driver</Link> </li> <li className=\"mx-3\"> <Link to=\"/route\" className=\"btn btn-link\">Route</Link> </li> <li className=\"mx-3\"> <Link to=\"/work-shifts\" className=\"btn btn-link\">Work Shifts</Link> </li> </ul> </nav> </header> ); }; export default Header;","title":"header.jsx:"},{"location":"lab4/components/#protectedroutejs","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0443\u0442\u0438 import React from 'react'; import { Navigate } from 'react-router-dom'; import { useToken } from '../stores/token'; const ProtectedRoute = ({ element }) => { const { token } = useToken(); return token ? element : <Navigate to=\"/login\" />; }; export default ProtectedRoute;","title":"ProtectedRoute.js:"},{"location":"lab4/page/","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430. \u0421\u0442\u0435\u043a JavaScript node.js React axios \u041b\u0438\u0441\u0442\u0438\u043d\u0433 LoginPage.jsx: \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f import React, { useState } from 'react'; import { useNavigate } from 'react-router-dom'; import { useToken } from '../stores/token'; import axios from '../utils/axiosConfig'; import '../Css/LoginPage.css'; const LoginPage = () => { const [form, setForm] = useState({ username: '', password: '' }); const { setToken } = useToken(); const navigate = useNavigate(); const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value }); }; const login = async () => { console.log('Login button clicked'); console.log('Form data:', form); try { const response = await axios.post('api/auth/token/login/', form); if (response.status === 200) { setToken(response.data.auth_token); navigate('/'); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0445\u043e\u0434\u0430:', error.response?.data || error.message); } }; const register = () => { navigate('/register'); }; return ( <div className=\"login-container\"> <h2>\u0412\u0445\u043e\u0434</h2> <input type=\"text\" name=\"username\" placeholder=\"\u041b\u043e\u0433\u0438\u043d\" value={form.username} onChange={handleChange} required /> <input type=\"password\" name=\"password\" placeholder=\"\u041f\u0430\u0440\u043e\u043b\u044c\" value={form.password} onChange={handleChange} required /> <div className=\"button-container\"> <button onClick={login}>\u0412\u043e\u0439\u0442\u0438</button> <button onClick={register}>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> </div> </div> ); }; export default LoginPage; RegisterPage.jsx: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f import React, { useState } from 'react'; import { useNavigate } from 'react-router-dom'; import axios from '../utils/axiosConfig'; import { useToken } from '../stores/token'; import '../Css/RegisterPage.css'; const RegisterPage = () => { const [form, setForm] = useState({ email: '', username: '', password: '', re_password: '' }); const { setToken } = useToken(); const navigate = useNavigate(); const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value }); }; const register = async () => { try { const response = await axios.post('/auth/users/', { email: form.email, username: form.username, password: form.password, re_password: form.re_password }); if (response.status === 201) { const token = await getToken(form.username, form.password); if (token) { setToken(token); navigate('/'); } } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:', error.response?.data || error.message); } }; const getToken = async (username, password) => { try { const response = await axios.post('/auth/token/login/', { username, password }); if (response.status === 200) return response.data.auth_token; } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430:', error.response?.data || error.message); return null; } }; const login = () => navigate('/login'); return ( <div className=\"register-container\"> <h2>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f</h2> <input type=\"email\" name=\"email\" placeholder=\"\u041f\u043e\u0447\u0442\u0430\" value={form.email} onChange={handleChange} required /> <input type=\"text\" name=\"username\" placeholder=\"\u041b\u043e\u0433\u0438\u043d\" value={form.username} onChange={handleChange} required /> <input type=\"password\" name=\"password\" placeholder=\"\u041f\u0430\u0440\u043e\u043b\u044c\" value={form.password} onChange={handleChange} required /> <input type=\"password\" name=\"re_password\" placeholder=\"\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c\" value={form.re_password} onChange={handleChange} required /> <div className=\"button-container\"> <button onClick={register}>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> <button onClick={login}>\u0412\u043e\u0439\u0442\u0438</button> </div> </div> ); }; export default RegisterPage; BusesPage.jsx: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0410\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/BusesPage.css'; const BusesPage = () => { const [buses, setBuses] = useState([]); const [busTypes, setBusTypes] = useState([]); const [form, setForm] = useState({ bus_type: '', registration_number: '', in_service: false, }); const [editBusId, setEditBusId] = useState(null); const { token } = useToken(); useEffect(() => { fetchBuses(); fetchBusTypes(); }, []); const fetchBuses = async () => { try { const response = await axios.get('/api/buses/', { headers: { Authorization: `Token ${token}` } }); setBuses(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const fetchBusTypes = async () => { try { const response = await axios.get('/api/bus-types/', { headers: { Authorization: `Token ${token}` } }); setBusTypes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const handleCheckboxChange = (e) => { setForm({ ...form, in_service: e.target.checked, }); }; const addBus = async () => { try { const response = await axios.post('/api/buses/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchBuses(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ bus_type: '', registration_number: '', in_service: false, }); setEditBusId(null); }; const editBus = (bus) => { setForm({ bus_type: bus.bus_type.id, registration_number: bus.registration_number, in_service: bus.in_service, }); setEditBusId(bus.id); }; const updateBus = async () => { try { const response = await axios.put(`/api/buses/${editBusId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchBuses(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const deleteBus = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0430\u0432\u0442\u043e\u0431\u0443\u0441?')) { try { await axios.delete(`/api/buses/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchBuses(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"buses-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u0422\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</th> <th>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440</th> <th>\u0412 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {buses.map((bus) => ( <tr key={bus.id}> <td>{bus.id}</td> <td>{bus.bus_type.name}</td> <td>{bus.registration_number}</td> <td>{bus.in_service ? '\u0414\u0430' : '\u041d\u0435\u0442'}</td> <td> <button onClick={() => editBus(bus)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteBus(bus.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editBusId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441'}</h3> <select name=\"bus_type\" value={form.bus_type} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</option> {busTypes.map((type) => ( <option key={type.id} value={type.id}> {type.name} - \u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c: {type.capacity} </option> ))} </select> <input type=\"text\" name=\"registration_number\" placeholder=\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\" value={form.registration_number} onChange={handleChange} required /> <label> \u0412 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438: <input type=\"checkbox\" checked={form.in_service} onChange={handleCheckboxChange} /> </label> {/* \u041a\u043d\u043e\u043f\u043a\u0438 */} {editBusId ? ( <button onClick={updateBus}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441</button> ) : ( <button onClick={addBus}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441</button> )} </div> ); }; export default BusesPage; BusTypesPage.jsx: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0438\u043f\u043e\u0432 \u0410\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/BusTypesPage.css'; const BusTypesPage = () => { const [busTypes, setBusTypes] = useState([]); const [form, setForm] = useState({ name: '', capacity: 0, }); const [editBusTypeId, setEditBusTypeId] = useState(null); const { token } = useToken(); useEffect(() => { fetchBusTypes(); }, []); const fetchBusTypes = async () => { try { const response = await axios.get('/api/bus-types/', { headers: { Authorization: `Token ${token}` } }); setBusTypes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addBusType = async () => { try { const response = await axios.post('/api/bus-types/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchBusTypes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ name: '', capacity: 0, }); setEditBusTypeId(null); }; const editBusType = (busType) => { setForm({ name: busType.name, capacity: busType.capacity, }); setEditBusTypeId(busType.id); }; const updateBusType = async () => { try { const response = await axios.put(`/api/bus-types/${editBusTypeId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchBusTypes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const deleteBusType = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430?')) { try { await axios.delete(`/api/bus-types/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchBusTypes(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"bus-types-container\"> <Header></Header> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435</th> <th>\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {busTypes.map((busType) => ( <tr key={busType.id}> <td>{busType.id}</td> <td>{busType.name}</td> <td>{busType.capacity}</td> <td> <button onClick={() => editBusType(busType)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteBusType(busType.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editBusTypeId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430'}</h3> <input type=\"text\" name=\"name\" placeholder=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\" value={form.name} onChange={handleChange} required /> <input type=\"number\" name=\"capacity\" placeholder=\"\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\" value={form.capacity} onChange={handleChange} required /> {editBusTypeId ? ( <button onClick={updateBusType}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</button> ) : ( <button onClick={addBusType}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</button> )} </div> ); }; export default BusTypesPage; DriversPage.jsx: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/DriverPage.css'; const DriversPage = () => { const [drivers, setDrivers] = useState([]); const [form, setForm] = useState({ passport_data: '', driver_class: '', work_experience: 0, salary: '', date_of_birth: '' }); const [editDriverId, setEditDriverId] = useState(null); const { token } = useToken(); useEffect(() => { fetchDrivers(); }, []); const fetchDrivers = async () => { try { const response = await axios.get('/api/drivers/', { headers: { Authorization: `Token ${token}` } }); setDrivers(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addDriver = async () => { try { const response = await axios.post('/api/drivers/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchDrivers(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ passport_data: '', driver_class: '', work_experience: 0, salary: '', date_of_birth: '' }); setEditDriverId(null); }; const editDriver = (driver) => { setForm(driver); setEditDriverId(driver.id); }; const updateDriver = async () => { try { const response = await axios.put(`/api/drivers/${editDriverId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchDrivers(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } }; const deleteDriver = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f?')) { try { await axios.delete(`/api/drivers/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchDrivers(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } } }; return ( <div className=\"drivers-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439</h2> <table> <thead> <tr> <th>ID</th> <th>\u041f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435</th> <th>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</th> <th>\u0421\u0442\u0430\u0436 \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430</th> <th>\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {drivers.map((driver) => ( <tr key={driver.id}> <td>{driver.id}</td> <td>{driver.passport_data}</td> <td>{driver.driver_class}</td> <td>{driver.work_experience}</td> <td>{driver.salary}</td> <td>{driver.date_of_birth}</td> <td> <button onClick={() => editDriver(driver)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteDriver(driver.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editDriverId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f'}</h3> <input type=\"text\" name=\"passport_data\" placeholder=\"\u041f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\" value={form.passport_data} onChange={handleChange} required /> <input type=\"text\" name=\"driver_class\" placeholder=\"\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\" value={form.driver_class} onChange={handleChange} required /> <input type=\"number\" name=\"work_experience\" placeholder=\"\u0421\u0442\u0430\u0436 \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.work_experience} onChange={handleChange} required /> <input type=\"text\" name=\"salary\" placeholder=\"\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430\" value={form.salary} onChange={handleChange} required /> <input type=\"date\" name=\"date_of_birth\" placeholder=\"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\" value={form.date_of_birth} onChange={handleChange} required /> {editDriverId ? ( <button onClick={updateDriver}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</button> ) : ( <button onClick={addDriver}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</button> )} </div> ); }; export default DriversPage; RoutesPage.jsx: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/RoutePage.css'; const RoutesPage = () => { const [routes, setRoutes] = useState([]); const [form, setForm] = useState({ number: '', start_point: '', end_point: '', operation_start_time: '', operation_end_time: '', interval: '', duration: '' }); const [editRouteId, setEditRouteId] = useState(null); const { token } = useToken(); useEffect(() => { fetchRoutes(); }, []); const fetchRoutes = async () => { try { const response = await axios.get('/api/routes/', { headers: { Authorization: `Token ${token}` } }); setRoutes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addRoute = async () => { try { const response = await axios.post('/api/routes/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchRoutes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ number: '', start_point: '', end_point: '', operation_start_time: '', operation_end_time: '', interval: '', duration: '' }); setEditRouteId(null); }; const editRoute = (route) => { setForm({ number: route.number, start_point: route.start_point, end_point: route.end_point, operation_start_time: route.operation_start_time, operation_end_time: route.operation_end_time, interval: route.interval, duration: route.duration }); setEditRouteId(route.id); }; const updateRoute = async () => { try { const response = await axios.put(`/api/routes/${editRouteId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchRoutes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } }; const deleteRoute = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442?')) { try { await axios.delete(`/api/routes/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchRoutes(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"routes-container\"> <Header></Header> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u041d\u043e\u043c\u0435\u0440</th> <th>\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430</th> <th>\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b</th> <th>\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {routes.map((route) => ( <tr key={route.id}> <td>{route.id}</td> <td>{route.number}</td> <td>{route.start_point}</td> <td>{route.end_point}</td> <td>{route.operation_start_time}</td> <td>{route.operation_end_time}</td> <td>{route.interval}</td> <td>{route.duration}</td> <td> <button onClick={() => editRoute(route)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteRoute(route.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editRouteId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442'}</h3> <input type=\"text\" name=\"number\" placeholder=\"\u041d\u043e\u043c\u0435\u0440\" value={form.number} onChange={handleChange} required /> <input type=\"text\" name=\"start_point\" placeholder=\"\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430\" value={form.start_point} onChange={handleChange} required /> <input type=\"text\" name=\"end_point\" placeholder=\"\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430\" value={form.end_point} onChange={handleChange} required /> <input type=\"time\" name=\"operation_start_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.operation_start_time} onChange={handleChange} required /> <input type=\"time\" name=\"operation_end_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.operation_end_time} onChange={handleChange} required /> <input type=\"text\" name=\"interval\" placeholder=\"\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b\" value={form.interval} onChange={handleChange} required /> <input type=\"text\" name=\"duration\" placeholder=\"\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\" value={form.duration} onChange={handleChange} required /> {editRouteId ? ( <button onClick={updateRoute}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442</button> ) : ( <button onClick={addRoute}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442</button> )} </div> ); }; export default RoutesPage; WorkShiftsPage.jsx: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u043c\u0435\u043d import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/WorkShiftsPage.css'; const WorkShiftsPage = () => { const [workShifts, setWorkShifts] = useState([]); const [drivers, setDrivers] = useState([]); const [buses, setBuses] = useState([]); const [routes, setRoutes] = useState([]); const [form, setForm] = useState({ date: '', shift_start_time: '', shift_end_time: '', status: 'Worked', reason: '', driver: 0, bus: 0, route: 0 }); const [editShiftId, setEditShiftId] = useState(null); const { token } = useToken(); useEffect(() => { fetchWorkShifts(); fetchDrivers(); fetchBuses(); fetchRoutes(); }, []); const fetchWorkShifts = async () => { try { const response = await axios.get('/api/work-shifts/', { headers: { Authorization: `Token ${token}` } }); setWorkShifts(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0441\u043c\u0435\u043d:', error.response?.data || error.message); } }; const fetchDrivers = async () => { try { const response = await axios.get('/api/drivers/', { headers: { Authorization: `Token ${token}` } }); setDrivers(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439:', error.response?.data || error.message); } }; const fetchBuses = async () => { try { const response = await axios.get('/api/buses/', { headers: { Authorization: `Token ${token}` } }); setBuses(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const fetchRoutes = async () => { try { const response = await axios.get('/api/routes/', { headers: { Authorization: `Token ${token}` } }); setRoutes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addWorkShift = async () => { try { const response = await axios.post('/api/work-shifts/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchWorkShifts(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ date: '', shift_start_time: '', shift_end_time: '', status: 'Worked', reason: '', driver: 0, bus: 0, route: 0 }); setEditShiftId(null); }; const editWorkShift = (shift) => { setForm(shift); setEditShiftId(shift.id); }; const updateWorkShift = async () => { try { const response = await axios.put(`/api/work-shifts/${editShiftId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchWorkShifts(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } }; const deleteWorkShift = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443?')) { try { await axios.delete(`/api/work-shifts/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchWorkShifts(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } } }; return ( <div className=\"work-shifts-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0441\u043c\u0435\u043d</h2> <table> <thead> <tr> <th>ID</th> <th>\u0414\u0430\u0442\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f</th> <th>\u0421\u0442\u0430\u0442\u0443\u0441</th> <th>\u041f\u0440\u0438\u0447\u0438\u043d\u0430</th> <th>\u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c</th> <th>\u0410\u0432\u0442\u043e\u0431\u0443\u0441</th> <th>\u041c\u0430\u0440\u0448\u0440\u0443\u0442</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {workShifts.map((shift) => ( <tr key={shift.id}> <td>{shift.id}</td> <td>{shift.date}</td> <td>{shift.shift_start_time}</td> <td>{shift.shift_end_time}</td> <td>{shift.status}</td> <td>{shift.reason}</td> <td>{shift.driver}</td> <td>{shift.bus}</td> <td>{shift.route}</td> <td> <button onClick={() => editWorkShift(shift)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteWorkShift(shift.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editShiftId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443'}</h3> <input type=\"date\" name=\"date\" placeholder=\"\u0414\u0430\u0442\u0430\" value={form.date} onChange={handleChange} required /> <input type=\"time\" name=\"shift_start_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\" value={form.shift_start_time} onChange={handleChange} required /> <input type=\"time\" name=\"shift_end_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f\" value={form.shift_end_time} onChange={handleChange} required /> <input type=\"text\" name=\"status\" placeholder=\"\u0421\u0442\u0430\u0442\u0443\u0441\" value={form.status} onChange={handleChange} required /> <input type=\"text\" name=\"reason\" placeholder=\"\u041f\u0440\u0438\u0447\u0438\u043d\u0430\" value={form.reason} onChange={handleChange} /> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:</h4> <select name=\"driver\" value={form.driver} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</option> {drivers.map(driver => ( <option key={driver.id} value={driver.id}> {driver.passport_data} - {driver.driver_class} </option> ))} </select> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0430\u0432\u0442\u043e\u0431\u0443\u0441:</h4> <select name=\"bus\" value={form.bus} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0430\u0432\u0442\u043e\u0431\u0443\u0441</option> {buses.map(bus => ( <option key={bus.id} value={bus.id}> {bus.registration_number} </option> ))} </select> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442:</h4> <select name=\"route\" value={form.route} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442</option> {routes.map(route => ( <option key={route.id} value={route.id}> {route.number} - {route.start_point} \u0434\u043e {route.end_point} </option> ))} </select> {editShiftId ? ( <button onClick={updateWorkShift}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443</button> ) : ( <button onClick={addWorkShift}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443</button> )} </div> ); }; export default WorkShiftsPage;","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"lab4/page/#_1","text":"","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"lab4/page/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab4/page/#_3","text":"JavaScript node.js React axios","title":"\u0421\u0442\u0435\u043a"},{"location":"lab4/page/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab4/page/#loginpagejsx","text":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f import React, { useState } from 'react'; import { useNavigate } from 'react-router-dom'; import { useToken } from '../stores/token'; import axios from '../utils/axiosConfig'; import '../Css/LoginPage.css'; const LoginPage = () => { const [form, setForm] = useState({ username: '', password: '' }); const { setToken } = useToken(); const navigate = useNavigate(); const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value }); }; const login = async () => { console.log('Login button clicked'); console.log('Form data:', form); try { const response = await axios.post('api/auth/token/login/', form); if (response.status === 200) { setToken(response.data.auth_token); navigate('/'); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0445\u043e\u0434\u0430:', error.response?.data || error.message); } }; const register = () => { navigate('/register'); }; return ( <div className=\"login-container\"> <h2>\u0412\u0445\u043e\u0434</h2> <input type=\"text\" name=\"username\" placeholder=\"\u041b\u043e\u0433\u0438\u043d\" value={form.username} onChange={handleChange} required /> <input type=\"password\" name=\"password\" placeholder=\"\u041f\u0430\u0440\u043e\u043b\u044c\" value={form.password} onChange={handleChange} required /> <div className=\"button-container\"> <button onClick={login}>\u0412\u043e\u0439\u0442\u0438</button> <button onClick={register}>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> </div> </div> ); }; export default LoginPage;","title":"LoginPage.jsx:"},{"location":"lab4/page/#registerpagejsx","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f import React, { useState } from 'react'; import { useNavigate } from 'react-router-dom'; import axios from '../utils/axiosConfig'; import { useToken } from '../stores/token'; import '../Css/RegisterPage.css'; const RegisterPage = () => { const [form, setForm] = useState({ email: '', username: '', password: '', re_password: '' }); const { setToken } = useToken(); const navigate = useNavigate(); const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value }); }; const register = async () => { try { const response = await axios.post('/auth/users/', { email: form.email, username: form.username, password: form.password, re_password: form.re_password }); if (response.status === 201) { const token = await getToken(form.username, form.password); if (token) { setToken(token); navigate('/'); } } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:', error.response?.data || error.message); } }; const getToken = async (username, password) => { try { const response = await axios.post('/auth/token/login/', { username, password }); if (response.status === 200) return response.data.auth_token; } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430:', error.response?.data || error.message); return null; } }; const login = () => navigate('/login'); return ( <div className=\"register-container\"> <h2>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f</h2> <input type=\"email\" name=\"email\" placeholder=\"\u041f\u043e\u0447\u0442\u0430\" value={form.email} onChange={handleChange} required /> <input type=\"text\" name=\"username\" placeholder=\"\u041b\u043e\u0433\u0438\u043d\" value={form.username} onChange={handleChange} required /> <input type=\"password\" name=\"password\" placeholder=\"\u041f\u0430\u0440\u043e\u043b\u044c\" value={form.password} onChange={handleChange} required /> <input type=\"password\" name=\"re_password\" placeholder=\"\u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c\" value={form.re_password} onChange={handleChange} required /> <div className=\"button-container\"> <button onClick={register}>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> <button onClick={login}>\u0412\u043e\u0439\u0442\u0438</button> </div> </div> ); }; export default RegisterPage;","title":"RegisterPage.jsx:"},{"location":"lab4/page/#busespagejsx","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0410\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/BusesPage.css'; const BusesPage = () => { const [buses, setBuses] = useState([]); const [busTypes, setBusTypes] = useState([]); const [form, setForm] = useState({ bus_type: '', registration_number: '', in_service: false, }); const [editBusId, setEditBusId] = useState(null); const { token } = useToken(); useEffect(() => { fetchBuses(); fetchBusTypes(); }, []); const fetchBuses = async () => { try { const response = await axios.get('/api/buses/', { headers: { Authorization: `Token ${token}` } }); setBuses(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const fetchBusTypes = async () => { try { const response = await axios.get('/api/bus-types/', { headers: { Authorization: `Token ${token}` } }); setBusTypes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const handleCheckboxChange = (e) => { setForm({ ...form, in_service: e.target.checked, }); }; const addBus = async () => { try { const response = await axios.post('/api/buses/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchBuses(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ bus_type: '', registration_number: '', in_service: false, }); setEditBusId(null); }; const editBus = (bus) => { setForm({ bus_type: bus.bus_type.id, registration_number: bus.registration_number, in_service: bus.in_service, }); setEditBusId(bus.id); }; const updateBus = async () => { try { const response = await axios.put(`/api/buses/${editBusId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchBuses(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const deleteBus = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0430\u0432\u0442\u043e\u0431\u0443\u0441?')) { try { await axios.delete(`/api/buses/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchBuses(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"buses-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u0422\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</th> <th>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440</th> <th>\u0412 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {buses.map((bus) => ( <tr key={bus.id}> <td>{bus.id}</td> <td>{bus.bus_type.name}</td> <td>{bus.registration_number}</td> <td>{bus.in_service ? '\u0414\u0430' : '\u041d\u0435\u0442'}</td> <td> <button onClick={() => editBus(bus)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteBus(bus.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editBusId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441'}</h3> <select name=\"bus_type\" value={form.bus_type} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</option> {busTypes.map((type) => ( <option key={type.id} value={type.id}> {type.name} - \u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c: {type.capacity} </option> ))} </select> <input type=\"text\" name=\"registration_number\" placeholder=\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\" value={form.registration_number} onChange={handleChange} required /> <label> \u0412 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438: <input type=\"checkbox\" checked={form.in_service} onChange={handleCheckboxChange} /> </label> {/* \u041a\u043d\u043e\u043f\u043a\u0438 */} {editBusId ? ( <button onClick={updateBus}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441</button> ) : ( <button onClick={addBus}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u0431\u0443\u0441</button> )} </div> ); }; export default BusesPage;","title":"BusesPage.jsx:"},{"location":"lab4/page/#bustypespagejsx","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0442\u0438\u043f\u043e\u0432 \u0410\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/BusTypesPage.css'; const BusTypesPage = () => { const [busTypes, setBusTypes] = useState([]); const [form, setForm] = useState({ name: '', capacity: 0, }); const [editBusTypeId, setEditBusTypeId] = useState(null); const { token } = useToken(); useEffect(() => { fetchBusTypes(); }, []); const fetchBusTypes = async () => { try { const response = await axios.get('/api/bus-types/', { headers: { Authorization: `Token ${token}` } }); setBusTypes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addBusType = async () => { try { const response = await axios.post('/api/bus-types/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchBusTypes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ name: '', capacity: 0, }); setEditBusTypeId(null); }; const editBusType = (busType) => { setForm({ name: busType.name, capacity: busType.capacity, }); setEditBusTypeId(busType.id); }; const updateBusType = async () => { try { const response = await axios.put(`/api/bus-types/${editBusTypeId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchBusTypes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } }; const deleteBusType = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430?')) { try { await axios.delete(`/api/bus-types/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchBusTypes(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"bus-types-container\"> <Header></Header> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0438\u043f\u043e\u0432 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435</th> <th>\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {busTypes.map((busType) => ( <tr key={busType.id}> <td>{busType.id}</td> <td>{busType.name}</td> <td>{busType.capacity}</td> <td> <button onClick={() => editBusType(busType)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteBusType(busType.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editBusTypeId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430'}</h3> <input type=\"text\" name=\"name\" placeholder=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\" value={form.name} onChange={handleChange} required /> <input type=\"number\" name=\"capacity\" placeholder=\"\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\" value={form.capacity} onChange={handleChange} required /> {editBusTypeId ? ( <button onClick={updateBusType}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</button> ) : ( <button onClick={addBusType}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430</button> )} </div> ); }; export default BusTypesPage;","title":"BusTypesPage.jsx:"},{"location":"lab4/page/#driverspagejsx","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/DriverPage.css'; const DriversPage = () => { const [drivers, setDrivers] = useState([]); const [form, setForm] = useState({ passport_data: '', driver_class: '', work_experience: 0, salary: '', date_of_birth: '' }); const [editDriverId, setEditDriverId] = useState(null); const { token } = useToken(); useEffect(() => { fetchDrivers(); }, []); const fetchDrivers = async () => { try { const response = await axios.get('/api/drivers/', { headers: { Authorization: `Token ${token}` } }); setDrivers(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addDriver = async () => { try { const response = await axios.post('/api/drivers/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchDrivers(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ passport_data: '', driver_class: '', work_experience: 0, salary: '', date_of_birth: '' }); setEditDriverId(null); }; const editDriver = (driver) => { setForm(driver); setEditDriverId(driver.id); }; const updateDriver = async () => { try { const response = await axios.put(`/api/drivers/${editDriverId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchDrivers(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } }; const deleteDriver = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f?')) { try { await axios.delete(`/api/drivers/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchDrivers(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:', error.response?.data || error.message); } } }; return ( <div className=\"drivers-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439</h2> <table> <thead> <tr> <th>ID</th> <th>\u041f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435</th> <th>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</th> <th>\u0421\u0442\u0430\u0436 \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430</th> <th>\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {drivers.map((driver) => ( <tr key={driver.id}> <td>{driver.id}</td> <td>{driver.passport_data}</td> <td>{driver.driver_class}</td> <td>{driver.work_experience}</td> <td>{driver.salary}</td> <td>{driver.date_of_birth}</td> <td> <button onClick={() => editDriver(driver)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteDriver(driver.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editDriverId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f'}</h3> <input type=\"text\" name=\"passport_data\" placeholder=\"\u041f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\" value={form.passport_data} onChange={handleChange} required /> <input type=\"text\" name=\"driver_class\" placeholder=\"\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\" value={form.driver_class} onChange={handleChange} required /> <input type=\"number\" name=\"work_experience\" placeholder=\"\u0421\u0442\u0430\u0436 \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.work_experience} onChange={handleChange} required /> <input type=\"text\" name=\"salary\" placeholder=\"\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430\" value={form.salary} onChange={handleChange} required /> <input type=\"date\" name=\"date_of_birth\" placeholder=\"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\" value={form.date_of_birth} onChange={handleChange} required /> {editDriverId ? ( <button onClick={updateDriver}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</button> ) : ( <button onClick={addDriver}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</button> )} </div> ); }; export default DriversPage;","title":"DriversPage.jsx:"},{"location":"lab4/page/#routespagejsx","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/RoutePage.css'; const RoutesPage = () => { const [routes, setRoutes] = useState([]); const [form, setForm] = useState({ number: '', start_point: '', end_point: '', operation_start_time: '', operation_end_time: '', interval: '', duration: '' }); const [editRouteId, setEditRouteId] = useState(null); const { token } = useToken(); useEffect(() => { fetchRoutes(); }, []); const fetchRoutes = async () => { try { const response = await axios.get('/api/routes/', { headers: { Authorization: `Token ${token}` } }); setRoutes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addRoute = async () => { try { const response = await axios.post('/api/routes/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchRoutes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ number: '', start_point: '', end_point: '', operation_start_time: '', operation_end_time: '', interval: '', duration: '' }); setEditRouteId(null); }; const editRoute = (route) => { setForm({ number: route.number, start_point: route.start_point, end_point: route.end_point, operation_start_time: route.operation_start_time, operation_end_time: route.operation_end_time, interval: route.interval, duration: route.duration }); setEditRouteId(route.id); }; const updateRoute = async () => { try { const response = await axios.put(`/api/routes/${editRouteId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchRoutes(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } }; const deleteRoute = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442?')) { try { await axios.delete(`/api/routes/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchRoutes(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430:', error.response?.data || error.message); } } }; return ( <div className=\"routes-container\"> <Header></Header> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432</h2> <table> <thead> <tr> <th>ID</th> <th>\u041d\u043e\u043c\u0435\u0440</th> <th>\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430</th> <th>\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b</th> <th>\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b</th> <th>\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {routes.map((route) => ( <tr key={route.id}> <td>{route.id}</td> <td>{route.number}</td> <td>{route.start_point}</td> <td>{route.end_point}</td> <td>{route.operation_start_time}</td> <td>{route.operation_end_time}</td> <td>{route.interval}</td> <td>{route.duration}</td> <td> <button onClick={() => editRoute(route)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteRoute(route.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editRouteId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442'}</h3> <input type=\"text\" name=\"number\" placeholder=\"\u041d\u043e\u043c\u0435\u0440\" value={form.number} onChange={handleChange} required /> <input type=\"text\" name=\"start_point\" placeholder=\"\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430\" value={form.start_point} onChange={handleChange} required /> <input type=\"text\" name=\"end_point\" placeholder=\"\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430\" value={form.end_point} onChange={handleChange} required /> <input type=\"time\" name=\"operation_start_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.operation_start_time} onChange={handleChange} required /> <input type=\"time\" name=\"operation_end_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b\" value={form.operation_end_time} onChange={handleChange} required /> <input type=\"text\" name=\"interval\" placeholder=\"\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b\" value={form.interval} onChange={handleChange} required /> <input type=\"text\" name=\"duration\" placeholder=\"\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\" value={form.duration} onChange={handleChange} required /> {editRouteId ? ( <button onClick={updateRoute}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442</button> ) : ( <button onClick={addRoute}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0430\u0440\u0448\u0440\u0443\u0442</button> )} </div> ); }; export default RoutesPage;","title":"RoutesPage.jsx:"},{"location":"lab4/page/#workshiftspagejsx","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u043c\u0435\u043d import React, { useEffect, useState } from 'react'; import axios from 'axios'; import { useToken } from '../stores/token'; import Header from '../components/header.jsx'; import '../Css/WorkShiftsPage.css'; const WorkShiftsPage = () => { const [workShifts, setWorkShifts] = useState([]); const [drivers, setDrivers] = useState([]); const [buses, setBuses] = useState([]); const [routes, setRoutes] = useState([]); const [form, setForm] = useState({ date: '', shift_start_time: '', shift_end_time: '', status: 'Worked', reason: '', driver: 0, bus: 0, route: 0 }); const [editShiftId, setEditShiftId] = useState(null); const { token } = useToken(); useEffect(() => { fetchWorkShifts(); fetchDrivers(); fetchBuses(); fetchRoutes(); }, []); const fetchWorkShifts = async () => { try { const response = await axios.get('/api/work-shifts/', { headers: { Authorization: `Token ${token}` } }); setWorkShifts(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0441\u043c\u0435\u043d:', error.response?.data || error.message); } }; const fetchDrivers = async () => { try { const response = await axios.get('/api/drivers/', { headers: { Authorization: `Token ${token}` } }); setDrivers(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439:', error.response?.data || error.message); } }; const fetchBuses = async () => { try { const response = await axios.get('/api/buses/', { headers: { Authorization: `Token ${token}` } }); setBuses(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u043e\u0432:', error.response?.data || error.message); } }; const fetchRoutes = async () => { try { const response = await axios.get('/api/routes/', { headers: { Authorization: `Token ${token}` } }); setRoutes(response.data); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432:', error.response?.data || error.message); } }; const handleChange = (e) => { const { name, value } = e.target; setForm({ ...form, [name]: value, }); }; const addWorkShift = async () => { try { const response = await axios.post('/api/work-shifts/', form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 201) { fetchWorkShifts(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } }; const resetForm = () => { setForm({ date: '', shift_start_time: '', shift_end_time: '', status: 'Worked', reason: '', driver: 0, bus: 0, route: 0 }); setEditShiftId(null); }; const editWorkShift = (shift) => { setForm(shift); setEditShiftId(shift.id); }; const updateWorkShift = async () => { try { const response = await axios.put(`/api/work-shifts/${editShiftId}/`, form, { headers: { Authorization: `Token ${token}` } }); if (response.status === 200) { fetchWorkShifts(); resetForm(); } } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } }; const deleteWorkShift = async (id) => { if (window.confirm('\u0412\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443?')) { try { await axios.delete(`/api/work-shifts/${id}/`, { headers: { Authorization: `Token ${token}` } }); fetchWorkShifts(); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0441\u043c\u0435\u043d\u044b:', error.response?.data || error.message); } } }; return ( <div className=\"work-shifts-container\"> <Header /> <h2>\u0421\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0441\u043c\u0435\u043d</h2> <table> <thead> <tr> <th>ID</th> <th>\u0414\u0430\u0442\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430</th> <th>\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f</th> <th>\u0421\u0442\u0430\u0442\u0443\u0441</th> <th>\u041f\u0440\u0438\u0447\u0438\u043d\u0430</th> <th>\u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c</th> <th>\u0410\u0432\u0442\u043e\u0431\u0443\u0441</th> <th>\u041c\u0430\u0440\u0448\u0440\u0443\u0442</th> <th>\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f</th> </tr> </thead> <tbody> {workShifts.map((shift) => ( <tr key={shift.id}> <td>{shift.id}</td> <td>{shift.date}</td> <td>{shift.shift_start_time}</td> <td>{shift.shift_end_time}</td> <td>{shift.status}</td> <td>{shift.reason}</td> <td>{shift.driver}</td> <td>{shift.bus}</td> <td>{shift.route}</td> <td> <button onClick={() => editWorkShift(shift)}>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c</button> <button onClick={() => deleteWorkShift(shift.id)}>\u0423\u0434\u0430\u043b\u0438\u0442\u044c</button> </td> </tr> ))} </tbody> </table> <h3>{editShiftId ? '\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443' : '\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443'}</h3> <input type=\"date\" name=\"date\" placeholder=\"\u0414\u0430\u0442\u0430\" value={form.date} onChange={handleChange} required /> <input type=\"time\" name=\"shift_start_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\" value={form.shift_start_time} onChange={handleChange} required /> <input type=\"time\" name=\"shift_end_time\" placeholder=\"\u0412\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f\" value={form.shift_end_time} onChange={handleChange} required /> <input type=\"text\" name=\"status\" placeholder=\"\u0421\u0442\u0430\u0442\u0443\u0441\" value={form.status} onChange={handleChange} required /> <input type=\"text\" name=\"reason\" placeholder=\"\u041f\u0440\u0438\u0447\u0438\u043d\u0430\" value={form.reason} onChange={handleChange} /> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:</h4> <select name=\"driver\" value={form.driver} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</option> {drivers.map(driver => ( <option key={driver.id} value={driver.id}> {driver.passport_data} - {driver.driver_class} </option> ))} </select> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0430\u0432\u0442\u043e\u0431\u0443\u0441:</h4> <select name=\"bus\" value={form.bus} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0430\u0432\u0442\u043e\u0431\u0443\u0441</option> {buses.map(bus => ( <option key={bus.id} value={bus.id}> {bus.registration_number} </option> ))} </select> <h4>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442:</h4> <select name=\"route\" value={form.route} onChange={handleChange} required> <option value=\"\">\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442</option> {routes.map(route => ( <option key={route.id} value={route.id}> {route.number} - {route.start_point} \u0434\u043e {route.end_point} </option> ))} </select> {editShiftId ? ( <button onClick={updateWorkShift}>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443</button> ) : ( <button onClick={addWorkShift}>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0441\u043c\u0435\u043d\u0443</button> )} </div> ); }; export default WorkShiftsPage;","title":"WorkShiftsPage.jsx:"},{"location":"lab4/stores/","text":"\u0422\u043e\u043a\u0435\u043d \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0422\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430. \u0421\u0442\u0435\u043a JavaScript node.js React axios \u041b\u0438\u0441\u0442\u0438\u043d\u0433 token.js: \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u0430 import React, { createContext, useContext, useState } from 'react'; import axios from 'axios'; const TokenContext = createContext(); export const TokenProvider = ({ children }) => { const [token, setToken] = useState(null); const updateToken = (newToken) => { setToken(newToken); if (newToken) { axios.defaults.headers.common['Authorization'] = 'Token ' + newToken; } else { delete axios.defaults.headers.common['Authorization']; } }; return ( <TokenContext.Provider value={{ token, setToken: updateToken }}> {children} </TokenContext.Provider> ); }; export const useToken = () => { return useContext(TokenContext); };","title":"Stores"},{"location":"lab4/stores/#_1","text":"","title":"\u0422\u043e\u043a\u0435\u043d"},{"location":"lab4/stores/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0422\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab4/stores/#_3","text":"JavaScript node.js React axios","title":"\u0421\u0442\u0435\u043a"},{"location":"lab4/stores/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab4/stores/#tokenjs","text":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u0430 import React, { createContext, useContext, useState } from 'react'; import axios from 'axios'; const TokenContext = createContext(); export const TokenProvider = ({ children }) => { const [token, setToken] = useState(null); const updateToken = (newToken) => { setToken(newToken); if (newToken) { axios.defaults.headers.common['Authorization'] = 'Token ' + newToken; } else { delete axios.defaults.headers.common['Authorization']; } }; return ( <TokenContext.Provider value={{ token, setToken: updateToken }}> {children} </TokenContext.Provider> ); }; export const useToken = () => { return useContext(TokenContext); };","title":"token.js:"},{"location":"lab4/utils/","text":"\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430. \u0421\u0442\u0435\u043a JavaScript node.js React axios \u041b\u0438\u0441\u0442\u0438\u043d\u0433 axiosConfig.js: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f URL import axios from 'axios'; axios.defaults.baseURL = 'http://localhost:8000'; export default axios; router.js: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a \u0444\u0440\u043e\u043d\u0442\u0430 import React from 'react'; import { Routes, Route, Navigate } from 'react-router-dom'; import BusPage from '../page/BusPage'; import BusTypesPage from '../page/BusTypesPage'; import DriverPage from '../page/DriverPage'; import RoutePage from '../page/RoutePage'; import WorkShiftsPage from '../page/WorkShiftsPage'; import LoginPage from '../page/LoginPage'; import RegisterPage from '../page/RegisterPage'; import ProtectedRoute from '../components/ProtectedRoute'; const AppRoutes = () => { return ( <Routes> <Route path=\"/login\" element={<LoginPage />} /> <Route path=\"/register\" element={<RegisterPage />} /> <Route path=\"/\" element={<ProtectedRoute element={<BusPage />} />} /> <Route path=\"/bus\" element={<ProtectedRoute element={<BusPage />} />} /> <Route path=\"/driver\" element={<ProtectedRoute element={<DriverPage />} />} /> <Route path=\"/route\" element={<ProtectedRoute element={<RoutePage />} />} /> <Route path=\"/work-shifts\" element={<ProtectedRoute element={<WorkShiftsPage />} />} /> <Route path=\"/bustype\" element={<ProtectedRoute element={<BusTypesPage />} />} /> <Route path=\"*\" element={<LoginPage />} /> </Routes> ); }; export default AppRoutes;","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u044b"},{"location":"lab4/utils/#_1","text":"","title":"\u0423\u0442\u0438\u043b\u0438\u0442\u044b"},{"location":"lab4/utils/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0444\u0440\u043e\u043d\u0442\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab4/utils/#_3","text":"JavaScript node.js React axios","title":"\u0421\u0442\u0435\u043a"},{"location":"lab4/utils/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"lab4/utils/#axiosconfigjs","text":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f URL import axios from 'axios'; axios.defaults.baseURL = 'http://localhost:8000'; export default axios;","title":"axiosConfig.js:"},{"location":"lab4/utils/#routerjs","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a \u0444\u0440\u043e\u043d\u0442\u0430 import React from 'react'; import { Routes, Route, Navigate } from 'react-router-dom'; import BusPage from '../page/BusPage'; import BusTypesPage from '../page/BusTypesPage'; import DriverPage from '../page/DriverPage'; import RoutePage from '../page/RoutePage'; import WorkShiftsPage from '../page/WorkShiftsPage'; import LoginPage from '../page/LoginPage'; import RegisterPage from '../page/RegisterPage'; import ProtectedRoute from '../components/ProtectedRoute'; const AppRoutes = () => { return ( <Routes> <Route path=\"/login\" element={<LoginPage />} /> <Route path=\"/register\" element={<RegisterPage />} /> <Route path=\"/\" element={<ProtectedRoute element={<BusPage />} />} /> <Route path=\"/bus\" element={<ProtectedRoute element={<BusPage />} />} /> <Route path=\"/driver\" element={<ProtectedRoute element={<DriverPage />} />} /> <Route path=\"/route\" element={<ProtectedRoute element={<RoutePage />} />} /> <Route path=\"/work-shifts\" element={<ProtectedRoute element={<WorkShiftsPage />} />} /> <Route path=\"/bustype\" element={<ProtectedRoute element={<BusTypesPage />} />} /> <Route path=\"*\" element={<LoginPage />} /> </Routes> ); }; export default AppRoutes;","title":"router.js:"}]}