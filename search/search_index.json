{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Swagger/","text":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a JSON Swagger api \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts \u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435","title":"swagger"},{"location":"Swagger/#_1","text":"","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"Swagger/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"Swagger/#_3","text":"JSON Swagger api","title":"\u0421\u0442\u0435\u043a"},{"location":"Swagger/#_4","text":"\u0421\u0441\u044b\u043b\u043a\u0430: http://127.0.0.1:8000/swagger/ \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 bus-types buses route-stats drivers routes work-shifts","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"Swagger/#_5","text":"","title":"\u0440\u0435\u0441\u043f\u043e\u043d\u0441\u044b"},{"location":"Swagger/#_6","text":"","title":"\u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\" \u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\" \u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\" \u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\" \u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"models"},{"location":"models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"models/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"models/#modelspy","text":"","title":"models.py:"},{"location":"models/#bustype","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0412\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 class BusType(models.Model): name = models.CharField(max_length=100) capacity = models.PositiveIntegerField() def __str__(self): return f\"{self.name} (Capacity: {self.capacity})\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c BusType \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#bus","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441 class Bus(models.Model): registration_number = models.CharField(max_length=20, unique=True) bus_type = models.ForeignKey(BusType, on_delete=models.CASCADE) in_service = models.BooleanField(default=True) def __str__(self): return f\"Bus {self.registration_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c bus \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#driver","text":"\u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f(\u0444\u0438\u043a\u0441 3) \u041f\u043e\u043b\u0435 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0435\u043d\u044c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f class Driver(models.Model): passport_data = models.CharField(max_length=100) DRIVER_CLASS_CHOICES = [ ('A', 'Class A'), ('B', 'Class B'), ('C', 'Class C'), ] driver_class = models.CharField(max_length=1, choices=DRIVER_CLASS_CHOICES) work_experience = models.PositiveIntegerField() salary = models.DecimalField(max_digits=10, decimal_places=2) date_of_birth = models.DateField(default=date.today) def __str__(self): return f\"Driver {self.passport_data}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Driver \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#route","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u041f\u043e\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u041f\u043e\u043b\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043c\u0435\u0436\u0434\u0443 \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 class Route(models.Model): number = models.CharField(max_length=20, unique=True, default='') start_point = models.CharField(max_length=100) end_point = models.CharField(max_length=100) operation_start_time = models.TimeField() operation_end_time = models.TimeField() interval = models.DurationField(null=True, blank=True) duration = models.DurationField(null=True, blank=True) def __str__(self): return f\"Route {self.number}: {self.start_point} - {self.end_point}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c Route \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#workshift","text":"\u041f\u043e\u043b\u0435 driver \u041f\u043e\u043b\u0435 bus \u041f\u043e\u043b\u0435 route \u041f\u043e\u043b\u0435 date \u041f\u043e\u043b\u0435 shift_start_time \u041f\u043e\u043b\u0435 shift_end_time \u041f\u043e\u043b\u0435 reason \u041f\u043e\u043b\u0435 status class WorkShift(models.Model): driver = models.ForeignKey(Driver, on_delete=models.CASCADE) bus = models.ForeignKey(Bus, on_delete=models.CASCADE) route = models.ForeignKey(Route, on_delete=models.CASCADE) date = models.DateField() shift_start_time = models.TimeField() shift_end_time = models.TimeField() STATUS_CHOICES = [ ('Worked', 'Worked'), ('Absent', 'Absent'), ('Sick', 'Sick'), ('Breakdown', 'Breakdown'), ('No Driver', 'No Driver'), ('No Bus', 'No Bus'), ] status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Worked') reason = models.TextField(null=True, blank=True) class Meta: unique_together = ('driver', 'date', 'shift_start_time', 'shift_end_time') def __str__(self): return f\"Shift on {self.date}: {self.driver} on {self.bus} for {self.route}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c WorkShift \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"serializers/","text":"Serializer \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 serializer.py: Serializers: from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"serializers"},{"location":"serializers/#serializer","text":"","title":"Serializer"},{"location":"serializers/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c Serializer \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"serializers/#_2","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"serializers/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"serializers/#serializerpy","text":"","title":"serializer.py:"},{"location":"serializers/#serializers","text":"from rest_framework import serializers from .models import BusType, Bus, Driver, Route, WorkShift class BusTypeSerializer(serializers.ModelSerializer): class Meta: model = BusType fields = '__all__' class BusSerializer(serializers.ModelSerializer): bus_type = BusTypeSerializer() class Meta: model = Bus fields = '__all__' class DriverSerializer(serializers.ModelSerializer): class Meta: model = Driver fields = '__all__' class RouteSerializer(serializers.ModelSerializer): class Meta: model = Route fields = [ 'id', 'number', 'start_point', 'end_point', 'operation_start_time', 'operation_end_time', 'interval', 'duration' ] class WorkShiftSerializer(serializers.ModelSerializer): driver = DriverSerializer() bus = BusSerializer() route = RouteSerializer() class Meta: model = WorkShift fields = ['id', 'date', 'shift_start_time', 'shift_end_time', 'status', 'reason', 'driver', 'bus', 'route'] def validate(self, data): # \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u043d driver_id = data.get('driver').get('id') # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 date = data.get('date') overlapping_shifts = WorkShift.objects.filter( driver_id=driver_id, date=date ) if overlapping_shifts.exists(): raise serializers.ValidationError(\"Driver already has a shift on this date.\") return data def create(self, validated_data): driver_data = validated_data.pop('driver') bus_data = validated_data.pop('bus') route_data = validated_data.pop('route') driver = Driver.objects.create(**driver_data) bus = Bus.objects.create(**bus_data) route = Route.objects.create(**route_data) work_shift = WorkShift.objects.create(driver=driver, bus=bus, route=route, **validated_data) return work_shift class RouteTimeSerializer(serializers.ModelSerializer): class Meta: model = Route fields = '__all__'","title":"Serializers:"},{"location":"settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"settings"},{"location":"settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"settings/#_3","text":"Python","title":"\u0421\u0442\u0435\u043a"},{"location":"settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"settings/#settingspy","text":"DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf_yasg', 'lr3app', ] SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'Token': { 'type': 'apiKey', 'name': 'Authorization', 'in': 'header', 'description': '\u0424\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u043a\u0435\u043d\u0430: Token {\u0442\u043e\u043a\u0435\u043d}' } }, } REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ), } DJOSER = { 'LOGIN_FIELD': 'username', 'USER_CREATE_PASSWORD_RETYPE': True, 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token', 'SERIALIZERS': {}, } MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'lr3.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'lr3.wsgi.application' # Database # https://docs.djangoproject.com/en/5.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/5.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'","title":"settings.py:"},{"location":"urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"urls"},{"location":"urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"urls/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"urls/#urlspy","text":"from django.contrib import admin from django.urls import include, path, re_path from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"Bus API\", default_version='v1', description=\"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0431\u0443\u0441\u0430\u043c\u0438\", terms_of_service=\"https://www.google.com/policies/terms/\", contact=openapi.Contact(email=\"prokopecsemen@gmail.com\"), license=openapi.License(name=\"BSD License\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('api/', include('lr3app.urls')), re_path(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'), path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), ] from django.urls import include, path from rest_framework import routers from .views import ( BusTypeViewSet, BusViewSet, DriverViewSet, RouteViewSet, WorkShiftViewSet, DriversByRouteView, RouteStatsViewSet, ) router = routers.DefaultRouter() router.register(r'bus-types', BusTypeViewSet) router.register(r'buses', BusViewSet) router.register(r'drivers', DriverViewSet) router.register(r'routes', RouteViewSet) router.register(r'work-shifts', WorkShiftViewSet) router.register(r'route-stats', RouteStatsViewSet, basename='route-stats') urlpatterns = [ path('', include(router.urls)), path('auth/', include('djoser.urls')), path('auth/', include('djoser.urls.authtoken')), ] urlpatterns += [ path('drivers/route/<int:route_id>/', DriversByRouteView.as_view(), name='drivers-by-route'), ]","title":"urls.py:"},{"location":"views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a Python django restFramework djoser drf_yasg \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"views"},{"location":"views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"views/#_3","text":"Python django restFramework djoser drf_yasg","title":"\u0421\u0442\u0435\u043a"},{"location":"views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"views/#viewspy","text":"","title":"views.py:"},{"location":"views/#_5","text":"from django.db.models import Count, Sum from rest_framework import viewsets, status, generics from django.db import models from rest_framework.decorators import action from rest_framework.permissions import IsAuthenticated from rest_framework.views import APIView from .models import BusType, Bus, Driver, Route, WorkShift from rest_framework.response import Response from .serializers import ( BusTypeSerializer, BusSerializer, DriverSerializer, RouteSerializer, WorkShiftSerializer, RouteTimeSerializer, ) class BusTypeViewSet(viewsets.ModelViewSet): queryset = BusType.objects.all() serializer_class = BusTypeSerializer class BusViewSet(viewsets.ModelViewSet): queryset = Bus.objects.all() serializer_class = BusSerializer class DriverViewSet(viewsets.ModelViewSet): queryset = Driver.objects.all() serializer_class = DriverSerializer def get(self,request,*args,**kwargs): driver_id = kwargs.get('id') if driver_id: driver = self.get_queryset().filter(id=driver_id).first() serializer = self.get_serializer(driver) return Response(serializer.data, status=status.HTTP_200_OK) class RouteViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() serializer_class = RouteSerializer class WorkShiftViewSet(viewsets.ModelViewSet): queryset = WorkShift.objects.all() serializer_class = WorkShiftSerializer class DriversByRouteView(generics.ListAPIView): #\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 serializer_class = DriverSerializer def get_queryset(self): route_id = self.kwargs['route_id'] return Driver.objects.filter(workshift__route_id=route_id) class RouteStatsViewSet(viewsets.ModelViewSet): queryset = Route.objects.all() permission_classes = [IsAuthenticated] def get_serializer_class(self): if self.action == 'list': return RouteTimeSerializer return RouteTimeSerializer @action(detail=False, methods=['GET']) def total_duration(self, request): total_duration = self.queryset.aggregate(total_duration=Sum('duration'))['total_duration'] return Response({'total_route_duration': total_duration}) @action(detail=False, methods=['GET']) def driver_class_count(self, request): driver_classes = Driver.objects.values('driver_class').annotate(count=Count('id')) return Response(driver_classes)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"}]}