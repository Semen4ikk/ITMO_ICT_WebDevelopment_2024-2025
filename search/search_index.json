{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prokopets Semen Lab 2","title":"Home"},{"location":"#prokopets-semen-lab-2","text":"","title":"Prokopets Semen Lab 2"},{"location":"forms/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 forms.py: \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430: class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport') \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], ) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430: class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"forms"},{"location":"forms/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"forms/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"forms/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"forms/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"forms/#formspy","text":"","title":"forms.py:"},{"location":"forms/#_5","text":"class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'passport')","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430:"},{"location":"forms/#_6","text":"class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField( label='Flight date', widget=forms.DateInput(attrs={ 'type': 'date', 'class': 'form-control', }), input_formats=['%Y-%m-%d'], )","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"forms/#_7","text":"class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u0430:"},{"location":"forms/#_8","text":"class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3)","title":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 models.py: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: \u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"models"},{"location":"models/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"models/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"models/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"models/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"models/#modelspy","text":"","title":"models.py:"},{"location":"models/#_5","text":"\u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u041f\u043e\u043b\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) def __str__(self): return self.username","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#_6","text":"\u041f\u043e\u043b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u043b\u0435 \u0412\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u041f\u0440\u0438\u043b\u0435\u0442\u0430 class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#_7","text":"\u041f\u043e\u043b\u0435 \u041c\u0435\u0441\u0442\u0430 \u041f\u043e\u043b\u0435 \u0412\u044b\u0445\u043e\u0434\u0430 \u041f\u043e\u043b\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \u0432\u044b\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0442\u0438\u043f\u0430 \u041f\u043e\u043b\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) is_confirmed = models.BooleanField(default=False) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"models/#_8","text":"\u041f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u041f\u043e\u043b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \u042e\u0437\u0435\u0440\u0430 \u041f\u043e\u043b\u0435 \u043f\u043e\u043b\u0435\u0442\u0430 \u041f\u043e\u043b\u0435 \u0434\u0430\u0442\u044b class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:"},{"location":"settings/","text":"\u0424\u043e\u0440\u043c\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 settings.py: from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"settings"},{"location":"settings/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"settings/#_2","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"settings/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"settings/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"settings/#settingspy","text":"from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = \"django-insecure-9*z2n*2h=l#pnig1k95ykk94u9h(+)vma)$-weo6)jxro8(izb\" # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", \"flights_app\" ] MIDDLEWARE = [ \"django.middleware.security.SecurityMiddleware\", \"django.contrib.sessions.middleware.SessionMiddleware\", \"django.middleware.common.CommonMiddleware\", \"django.middleware.csrf.CsrfViewMiddleware\", \"django.contrib.auth.middleware.AuthenticationMiddleware\", \"django.contrib.messages.middleware.MessageMiddleware\", \"django.middleware.clickjacking.XFrameOptionsMiddleware\", ] ROOT_URLCONF = \"djangoProject.urls\" TEMPLATES = [ { \"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"DIRS\": [BASE_DIR / 'templates'], \"APP_DIRS\": True, \"OPTIONS\": { \"context_processors\": [ \"django.template.context_processors.debug\", \"django.template.context_processors.request\", \"django.contrib.auth.context_processors.auth\", \"django.contrib.messages.context_processors.messages\", ], }, }, ] WSGI_APPLICATION = \"djangoProject.wsgi.application\" # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": BASE_DIR / \"db.sqlite3\", } } AUTHENTICATION_BACKENDS = ( \"django.contrib.auth.backends.ModelBackend\", ) AUTH_USER_MODEL = \"flights_app.User\" # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"UTC\" USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = \"static/\" # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"","title":"settings.py:"},{"location":"urls/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 urls.py: urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"urls"},{"location":"urls/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"urls/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"urls/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"urls/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"urls/#urlspy","text":"urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('manage_bookings/', manage_bookings, name='manage_bookings'), path('flight/<int:flight_id>/book', views.book_flight) ]","title":"urls.py:"},{"location":"views/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django \u041b\u0438\u0441\u0442\u0438\u043d\u0433 views.py: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438: def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430: def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432: def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432: def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432: def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f: def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438: def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket}) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430: @login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"views"},{"location":"views/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"views/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"views/#_3","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: django","title":"\u0421\u0442\u0435\u043a"},{"location":"views/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"views/#viewspy","text":"","title":"views.py:"},{"location":"views/#_5","text":"def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html')","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b:"},{"location":"views/#_6","text":"def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:"},{"location":"views/#_7","text":"def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430:"},{"location":"views/#_8","text":"def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432:"},{"location":"views/#_9","text":"def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0442\u043e\u0432:"},{"location":"views/#_10","text":"def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, })","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432:"},{"location":"views/#_11","text":"def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:"},{"location":"views/#_12","text":"def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') @login_required def update_ticket(request, ticket_id): ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm(initial={'seat': ticket.seat}) return render(request, 'update.html', {'form': form, 'ticket': ticket})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438:"},{"location":"views/#_13","text":"@login_required @user_passes_test(lambda u: u.is_superuser) def manage_bookings(request): tickets = Ticket.objects.all() if request.method == 'POST': ticket_id = request.POST.get('ticket_id') action = request.POST.get('action') ticket = get_object_or_404(Ticket, ticket_id=ticket_id) if action == 'confirm': ticket.is_confirmed = True ticket.save() elif action == 'reject': ticket.delete() return redirect('/tickets') return render(request, 'manage_bookings.html', {'tickets': tickets})","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0440\u0430:"}]}